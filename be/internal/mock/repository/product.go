// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/product.go
//
// Generated by this command:
//
//	mockgen -destination internal/mock/repository/product.go -package=repository_mock -source=internal/app/repository/product.go ProductRepository
//

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	reflect "reflect"

	persistence "github.com/nnrmps/blue-vending-machine/be/internal/app/persistence"
	request_model "github.com/nnrmps/blue-vending-machine/be/pkg/request_model"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
	isgomock struct{}
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductRepository) CreateProduct(ctx context.Context, tx *gorm.DB, req request_model.CreateProduct) (persistence.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, tx, req)
	ret0, _ := ret[0].(persistence.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepositoryMockRecorder) CreateProduct(ctx, tx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepository)(nil).CreateProduct), ctx, tx, req)
}

// DeductStockByProductID mocks base method.
func (m *MockProductRepository) DeductStockByProductID(ctx context.Context, tx *gorm.DB, productID string, stock int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductStockByProductID", ctx, tx, productID, stock)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeductStockByProductID indicates an expected call of DeductStockByProductID.
func (mr *MockProductRepositoryMockRecorder) DeductStockByProductID(ctx, tx, productID, stock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductStockByProductID", reflect.TypeOf((*MockProductRepository)(nil).DeductStockByProductID), ctx, tx, productID, stock)
}

// DeleteProductByID mocks base method.
func (m *MockProductRepository) DeleteProductByID(ctx context.Context, tx *gorm.DB, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductByID", ctx, tx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductByID indicates an expected call of DeleteProductByID.
func (mr *MockProductRepositoryMockRecorder) DeleteProductByID(ctx, tx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductByID", reflect.TypeOf((*MockProductRepository)(nil).DeleteProductByID), ctx, tx, productID)
}

// GetList mocks base method.
func (m *MockProductRepository) GetList(ctx context.Context, tx *gorm.DB) ([]persistence.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, tx)
	ret0, _ := ret[0].([]persistence.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockProductRepositoryMockRecorder) GetList(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockProductRepository)(nil).GetList), ctx, tx)
}

// GetProductByID mocks base method.
func (m *MockProductRepository) GetProductByID(ctx context.Context, tx *gorm.DB, productID string) (persistence.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, tx, productID)
	ret0, _ := ret[0].(persistence.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductRepositoryMockRecorder) GetProductByID(ctx, tx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductRepository)(nil).GetProductByID), ctx, tx, productID)
}

// UpdateProductByID mocks base method.
func (m *MockProductRepository) UpdateProductByID(ctx context.Context, tx *gorm.DB, productID string, req request_model.UpdateProductByID) (persistence.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductByID", ctx, tx, productID, req)
	ret0, _ := ret[0].(persistence.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductByID indicates an expected call of UpdateProductByID.
func (mr *MockProductRepositoryMockRecorder) UpdateProductByID(ctx, tx, productID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductByID", reflect.TypeOf((*MockProductRepository)(nil).UpdateProductByID), ctx, tx, productID, req)
}
